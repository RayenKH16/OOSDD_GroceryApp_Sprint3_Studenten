# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        configuration: [Debug, Release]

    env:
      Solution_Name: GroceryApp.sln                         # Jouw solution bestand
      Test_Project_Path: GroceryApp.Tests/GroceryApp.Tests.csproj  # Test project path
      Desktop_Project_Path: GroceryApp/GroceryApp.csproj    # WPF/WinForms project path
      Publish_Directory: ./publish                           # Output directory voor publish

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Build solution
      run: dotnet build ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }} --no-restore

    - name: Run tests
      run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }} --no-build --verbosity normal

    - name: Publish app
      run: dotnet publish ${{ env.Desktop_Project_Path }} -c ${{ matrix.configuration }} -r win-x64 --self-contained false -o ${{ env.Publish_Directory }}

    - name: Upload published app
      uses: actions/upload-artifact@v4
      with:
        name: GroceryApp-${{ matrix.configuration }}
        path: ${{ env.Publish_Directory }}

    # Optional: Signing workflow (indien je een WAP / MSIX package gebruikt)
    - name: Decode the pfx
      if: secrets.Base64_Encoded_Pfx != ''
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Desktop_Project_Path -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Remove the pfx after signing (veiligheid)
    - name: Remove the pfx
      if: secrets.Base64_Encoded_Pfx != ''
      run: Remove-Item -path $env:Desktop_Project_Path\GitHubActionsWorkflow.pfx
